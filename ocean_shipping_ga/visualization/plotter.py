"""
Í≤∞Í≥º ÏãúÍ∞ÅÌôî ÌÅ¥ÎûòÏä§
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from typing import Dict, List, Any
from models.parameters import GAParameters
from algorithms.fitness import FitnessCalculator


class ResultPlotter:
    """
    GA Í≤∞Í≥º ÏãúÍ∞ÅÌôî ÌÅ¥ÎûòÏä§
    """
    
    def __init__(self, params: GAParameters):
        """
        Parameters:
        -----------
        params : GAParameters
            GA Î∞è LP Î™®Îç∏ ÌååÎùºÎØ∏ÌÑ∞
        """
        self.params = params
        self.fitness_calculator = FitnessCalculator(params)
        
    def print_solution_summary(self, best_individual: Dict[str, Any]):
        """ÏµúÏ†ÅÌï¥ ÏöîÏïΩ Ï∂úÎ†•"""
        print("\n" + "=" * 60)
        print("üìä ÏµúÏ†Å ÏÜîÎ£®ÏÖò ÏöîÏïΩ")
        print("=" * 60)
        
        total_cost = self.fitness_calculator.calculate_total_cost(best_individual)
        penalty = self.fitness_calculator.calculate_penalties(best_individual)
        
        print(f"\nüí∞ ÎπÑÏö© Î∂ÑÏÑù:")
        print(f"  ‚Ä¢ Ï¥ù ÎπÑÏö©: ${total_cost:,.2f}")
        print(f"  ‚Ä¢ Ìå®ÎÑêÌã∞: {penalty:.2f}")
        print(f"  ‚Ä¢ Ï†ÅÌï©ÎèÑ: {best_individual['fitness']:.2f}")
        
        print(f"\nüì¶ Ïª®ÌÖåÏù¥ÎÑà Ìï†Îãπ:")
        print(f"  ‚Ä¢ Full Ïª®ÌÖåÏù¥ÎÑà: {np.sum(best_individual['xF']):,.0f} TEU")
        print(f"  ‚Ä¢ Empty Ïª®ÌÖåÏù¥ÎÑà: {np.sum(best_individual['xE']):,.0f} TEU")
        print(f"  ‚Ä¢ ÌèâÍ∑† Ïû¨Í≥†(Ï†ÑÏ≤¥ Ïª®ÌÖåÏù¥ÎÑà ÌíÄ): {np.mean(best_individual['y']):,.0f} TEU")
        
        # Î£®Ìä∏Î≥Ñ ÏàòÏöî Ï∂©Ï°±Î•†
        print(f"\nüö¢ Ï£ºÏöî Î£®Ìä∏ ÏÉÅÌÉú (ÏÉÅÏúÑ 5Í∞ú):")
        for r in self.params.R[:5]:
            if r in self.params.D_ab:
                route_schedules = self.params.schedule_data[
                    self.params.schedule_data['Î£®Ìä∏Î≤àÌò∏'] == r
                ]['Ïä§ÏºÄÏ§Ñ Î≤àÌò∏'].unique()
                
                total_full = sum(
                    best_individual['xF'][self.params.I.index(i)]
                    for i in route_schedules if i in self.params.I
                )
                
                demand = self.params.D_ab[r]
                fulfillment = (total_full / demand * 100) if demand > 0 else 0
                
                vessel = self.params.V_r.get(r, "Unknown")[:20]
                print(f"  Î£®Ìä∏ {r:3d}: {total_full:5.0f}/{demand:5.0f} TEU "
                      f"({fulfillment:5.1f}%) - {vessel}")
    
    def visualize_results(self, best_individual: Dict[str, Any], fitness_history: List[float]):
        """Í≤∞Í≥º ÏãúÍ∞ÅÌôî"""
        fig, axes = plt.subplots(2, 2, figsize=(14, 10))
        
        # 1. Ï†ÅÌï©ÎèÑ ÏßÑÌôî
        axes[0, 0].plot(fitness_history, 'b-', linewidth=2)
        axes[0, 0].set_xlabel('Generation')
        axes[0, 0].set_ylabel('Fitness')
        axes[0, 0].set_title('Fitness Evolution Process')
        axes[0, 0].grid(True, alpha=0.3)
        
        # 2. Ïª®ÌÖåÏù¥ÎÑà Î∂ÑÌè¨ (ÏÉÅÏúÑ 20Í∞ú Ïä§ÏºÄÏ§Ñ)
        n_display = min(20, self.params.num_schedules)
        x_pos = np.arange(n_display)
        
        axes[0, 1].bar(x_pos, best_individual['xF'][:n_display], 
                      alpha=0.7, label='Full', color='blue')
        axes[0, 1].bar(x_pos, best_individual['xE'][:n_display], 
                      alpha=0.7, label='Empty', color='orange', 
                      bottom=best_individual['xF'][:n_display])
        axes[0, 1].set_xlabel('Schedule Number')
        axes[0, 1].set_ylabel('Container Count (TEU)')
        axes[0, 1].set_title('Container Allocation by Schedule (Top 20)')
        axes[0, 1].legend()
        axes[0, 1].set_xticks(x_pos[::2])
        axes[0, 1].set_xticklabels(self.params.I[:n_display:2])
        
        # 3. Ìï≠Íµ¨Î≥Ñ ÌèâÍ∑† Ïû¨Í≥†
        avg_inventory = np.mean(best_individual['y'], axis=0)
        ports = self.params.P[:min(10, len(self.params.P))]
        
        axes[1, 0].barh(range(len(ports)), avg_inventory[:len(ports)], color='green', alpha=0.7)
        axes[1, 0].set_yticks(range(len(ports)))
        axes[1, 0].set_yticklabels(ports)
        axes[1, 0].set_xlabel('Average Inventory (TEU)')
        axes[1, 0].set_title('Average Empty Container Inventory by Port')
        axes[1, 0].grid(True, alpha=0.3, axis='x')
        
        # 4. ÎπÑÏö© Íµ¨ÏÑ±
        total_cost = self.fitness_calculator.calculate_total_cost(best_individual)
        
        transport_cost = sum(
            (self.params.CSHIP + self.params.CBAF) * best_individual['xF'][i]
            for i in range(self.params.num_schedules)
        )
        delay_cost = sum(
            self.params.CETA * self.params.DELAY_i.get(self.params.I[i], 0) * best_individual['xF'][i]
            for i in range(self.params.num_schedules)
        )
        empty_cost = self.params.CEMPTY_SHIP * np.sum(best_individual['xE'])
        
        costs = [transport_cost, delay_cost, empty_cost]
        labels = ['Transport Cost', 'Delay Penalty', 'Empty Transport']
        colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A']
        
        _, texts, autotexts = axes[1, 1].pie(
            costs, labels=labels, autopct='%1.1f%%',
            colors=colors, startangle=90
        )
        
        axes[1, 1].set_title(f'Cost Breakdown (Total: ${total_cost:,.0f})')        
        # Ìè∞Ìä∏ ÌÅ¨Í∏∞ Ï°∞Ï†ï
        for text in texts:
            text.set_fontsize(10)
        for autotext in autotexts:
            autotext.set_fontsize(9)
            autotext.set_color('white')
            autotext.set_weight('bold')
        
        plt.tight_layout()
        plt.show()
        
        return fig